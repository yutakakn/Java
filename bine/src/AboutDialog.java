/*
	A basic extension of the java.awt.Dialog class
 */

import java.awt.*;
import java.awt.event.*;

public class AboutDialog extends Dialog {

	public AboutDialog(Frame parent, boolean modal)
	{
		super(parent, modal);

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
        
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(java.awt.Color.white);
		setSize(270,180);
		setVisible(false);
		okButton.setLabel("OK");
		okButton.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.HAND_CURSOR));
		add(okButton);
		okButton.setBounds(192,24,66,27);
		label2.setText("Java Binary Editor");
		add(label2);
		label2.setForeground(java.awt.Color.blue);
		label2.setFont(new Font("Serif", Font.BOLD, 20));
		label2.setBounds(12,12,168,40);
		label3.setText("Java Binary Editor");
		add(label3);
		label3.setForeground(java.awt.Color.blue);
		label3.setFont(new Font("Serif", Font.BOLD, 20));
		label3.setBounds(12,12,168,40);
		label4.setText("Copyright (C)2001 YUTAKA");
		add(label4);
		label4.setBounds(60,84,156,24);
		label6.setText("URL: http://cgi3.tky.3web.ne.jp/~yutakakn/");
		add(label6);
		label6.setForeground(new java.awt.Color(255,128,0));
		label6.setBounds(24,108,228,24);
		setTitle("Version Information");
		//}}
		
		
		//バージョンの表示
		label1.setText(Bine.Version);
		add(label1);
		label1.setBounds(108,60,48,24);
		
		//実行しているJava環境の表示
		String version = System.getProperty("java.version");
		String vendor = System.getProperty("java.vendor");
		
		label5.setText("JVM: " + vendor + " " + version);
		add(label5);
		label5.setForeground(Color.red);
		label5.setBounds(26,138,212,24);
		
        
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		okButton.addActionListener(lSymAction);
		//}}
		
		okButton.addKeyListener(new SymKey());

	}
    
	public AboutDialog(Frame parent, String title, boolean modal)
	{
		this(parent, modal);
		setTitle(title);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
                Dimension d = getSize();

		super.addNotify();

		// Only do this once.
		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + d.width, insets.top + insets.bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets.left, insets.top);
			components[i].setLocation(p);
		}

		// Used for addNotify check.
		fComponentsAdjusted = true;
	}

	public void setVisible(boolean b)
	{
	    if (b)
	    {
    		Rectangle bounds = getParent().getBounds();
    		Rectangle abounds = getBounds();

    		setLocation(bounds.x + (bounds.width - abounds.width)/ 2,
    			 bounds.y + (bounds.height - abounds.height)/2);
	    }

		super.setVisible(b);
	}

	//{{DECLARE_CONTROLS
	java.awt.Button okButton = new java.awt.Button();
	java.awt.Label label2 = new java.awt.Label();
	java.awt.Label label3 = new java.awt.Label();
	java.awt.Label label4 = new java.awt.Label();
	java.awt.Label label6 = new java.awt.Label();
	//}}
	
	//バージョン、Java環境クレジット用ラベル
	java.awt.Label label1 = new java.awt.Label();
	java.awt.Label label5 = new java.awt.Label();
    
    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == okButton)
				okButton_ActionPerformed(event);
		}
	}

	//[OK]ボタンのイベントハンドラ
	void okButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    closeOpenedDialog();
	}

	//キーイベントハンドラ
	class SymKey extends KeyAdapter {
	    public void keyPressed(KeyEvent evt) {
	        int code = evt.getKeyCode();
	        
	        if (code == KeyEvent.VK_ESCAPE) { // ESCキー
	            
	            closeOpenedDialog();
	            
	        }
	        
	    }
	}
	
	//ダイアログを閉じる
	void closeOpenedDialog() {
		try {
			this.dispose();
		} catch (Exception e) {
		}
	}


	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == AboutDialog.this)
				AboutDialog_WindowClosing(event);
		}
	}

	void AboutDialog_WindowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
			 
		AboutDialog_WindowClosing_Interaction1(event);
	}


	void AboutDialog_WindowClosing_Interaction1(java.awt.event.WindowEvent event)
	{
		try {
			this.dispose();
		} catch (Exception e) {
		}
	}

}
