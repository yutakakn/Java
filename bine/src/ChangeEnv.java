/*
	A basic extension of the java.awt.Dialog class
 */

import java.awt.*;
import java.awt.event.*;


public class ChangeEnv extends Dialog 
{

	public ChangeEnv(Frame parent, boolean modal)
	{
	    
		super(parent, modal);

		// This code is automatically generated by VisualCafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what VisualCafe can generate, or VisualCafe may be unable to back
		// parse your Java file into its visual environment.
        
		//{{INIT_CONTROLS
		setLayout(null);
		setSize(336,295);
		setVisible(false);
		label1.setText("Font");
		add(label1);
		label1.setBounds(24,12,132,24);
		label2.setText("Size");
		add(label2);
		label2.setBounds(204,12,60,24);
		add(fsizeList);
		fsizeList.setBounds(204,36,60,21);
		label3.setText("PageLine");
		add(label3);
		label3.setBounds(24,168,132,24);
		add(pglineList);
		pglineList.setBounds(24,204,100,21);
		label4.setText("ScreenSize");
		add(label4);
		label4.setBounds(168,156,132,24);
		label5.setText("width");
		add(label5);
		label5.setBounds(168,180,36,24);
		label6.setText("height");
		add(label6);
		label6.setBounds(168,204,36,24);
		add(widthList);
		widthList.setBounds(216,180,60,21);
		add(heightList);
		heightList.setBounds(216,204,60,21);
		okButton.setLabel("OK");
		okButton.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.HAND_CURSOR));
		add(okButton);
		okButton.setBounds(36,252,66,27);
		cancelButton.setLabel("CANCEL");
		add(cancelButton);
		cancelButton.setBounds(132,252,66,27);
		defButton.setLabel("DEFAULT");
		add(defButton);
		defButton.setBounds(228,252,66,27);
		add(fontList);
		fontList.setBounds(24,36,156,108);
		add(label2);
		setTitle("Configure Options");
		//}}
		
		
		//ダイアログの初期化を行う
		init_dialog();
		
        
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		okButton.addActionListener(lSymAction);
		cancelButton.addActionListener(lSymAction);
		defButton.addActionListener(lSymAction);
		//}}
		
		//全コンポーネントへキーイベントハンドラを登録
		Component allcomp[] = getComponents();
		SymKey symkey = new SymKey();
		
		for (int i = 0 ; i < allcomp.length ; i++) {
		    allcomp[i].addKeyListener(symkey);
		}

	}
	
	
	/*
	 * 環境設定ダイアログの初期化
	 */
	void init_dialog() {
	    String fontlist[];
	    int i, j, selected;
	    
	    //フォントリストの表示
	    fontList.removeAll();
	    selected = -1;
	    
	    if (Bine.Java2VM) { // for Java2
	        GraphicsEnvironment body = GraphicsEnvironment.getLocalGraphicsEnvironment();
	        fontlist = body.getAvailableFontFamilyNames();
	    } else { // for JDK1.1
	        fontlist = getToolkit().getFontList(); 
	    }
	    
	    for (i = 0 ; i < fontlist.length ; i++) {
	        if (fontlist[i].equals(Bine.FontName)) {
	            fontList.select(i);
	            selected = i;
	        }
	        fontList.add(fontlist[i]);
	    }
	    if (selected == -1) { //選択肢に見つからない場合
	        fontList.select(0);
	    }
	    
	    //フォントサイズの選択リスト
	    fsizeList.removeAll();
	    selected = -1;
	    j = 0;
	    for (i = 10 ; i < 30 ; i += 2, j++) {
	        fsizeList.add("" + i);
	        if (i == Bine.FontSize) {
	            fsizeList.select("" + i);
	            selected = j;
	        }
	    }
	    if (selected == -1) { //見つからない場合
	        fsizeList.select("10");
	    }
	    
	    //ページライン数の選択リスト
	    pglineList.removeAll();
	    pglineList.add("1/1 page");
	    pglineList.add("1/2 page");
	    pglineList.add("1/4 page");
	    pglineList.select("1/" + Bine.ScrollLine + " page");
	    
	    //画面サイズの選択リスト
	    int wsize[] = {640, 800, 1024, 1280};
	    
	    widthList.removeAll();
	    for (i = 0 ; i < wsize.length ; i++) {
	        widthList.add("" + wsize[i]);
	    }
	    widthList.select(Bine.AppWidth + "");
	    
	    int hsize[] = {400, 600,  768, 1024};
	    
	    heightList.removeAll();
	    for (i = 0 ; i < hsize.length ; i++) {
	        heightList.add("" + hsize[i]);
	    }
	    heightList.select(Bine.AppHeight + "");
	    
	}
	
    
	public ChangeEnv(Frame parent, String title, boolean modal)
	{
		this(parent, modal);
		setTitle(title);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
                Dimension d = getSize();

		super.addNotify();

		// Only do this once.
		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + d.width, insets.top + insets.bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets.left, insets.top);
			components[i].setLocation(p);
		}

		// Used for addNotify check.
		fComponentsAdjusted = true;
	}

	public void setVisible(boolean b)
	{
	    if (b)
	    {
    		Rectangle bounds = getParent().getBounds();
    		Rectangle abounds = getBounds();

    		setLocation(bounds.x + (bounds.width - abounds.width)/ 2,
    			 bounds.y + (bounds.height - abounds.height)/2);
	    }

		super.setVisible(b);
	}

	//{{DECLARE_CONTROLS
	java.awt.Label label1 = new java.awt.Label();
	java.awt.Button okButton = new java.awt.Button();
	java.awt.Button cancelButton = new java.awt.Button();
	java.awt.Button defButton = new java.awt.Button();
	java.awt.List fontList = new java.awt.List(4);
	java.awt.Label label2 = new java.awt.Label();
	java.awt.Choice fsizeList = new java.awt.Choice();
	java.awt.Label label3 = new java.awt.Label();
	java.awt.Choice pglineList = new java.awt.Choice();
	java.awt.Label label4 = new java.awt.Label();
	java.awt.Label label5 = new java.awt.Label();
	java.awt.Label label6 = new java.awt.Label();
	java.awt.Choice widthList = new java.awt.Choice();
	java.awt.Choice heightList = new java.awt.Choice();
	//}}
    
    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == okButton)
				okButton_ActionPerformed(event);
			else if (object == cancelButton)
				cancelButton_ActionPerformed(event);
			else if (object == defButton)
				defButton_ActionPerformed(event);
		}
	}

	void okButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		okButton_ActionPerformed_Interaction1(event);
	}


	/*
	 * [OK]ボタンのイベントハンドラ
	 */
	void okButton_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
	    int pg[] = {1, 2, 4};
	    String s;
	    int n;
	    
	    //コンポーネントの設定を反映させる
	    
	    s = fontList.getSelectedItem();
	    if (s != null) {
	        Bine.FontName = s;   
	    }
	    
	    s = fsizeList.getSelectedItem();
	    if (s != null) {
	        try {
	            Bine.FontSize = Integer.parseInt(s);
	        } catch (NumberFormatException ex) {
	        }
	    }
	    
	    n = pglineList.getSelectedIndex();
	    Bine.ScrollLine = pg[n];
	    
	    s = widthList.getSelectedItem();
	    if (s != null) {
	        try {
	            Bine.AppWidth = Integer.parseInt(s);
	        } catch (NumberFormatException ex) {
	        }
	    }
	    s = heightList.getSelectedItem();
	    if (s != null) {
	        try {
	            Bine.AppHeight = Integer.parseInt(s);
	        } catch (NumberFormatException ex) {
	        }
	    }
	    
	    
	    
		try {
			this.dispose();
		} catch (Exception e) {
		}
	}


	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == ChangeEnv.this)
				ChangeEnv_WindowClosing(event);
		}
	}

	void ChangeEnv_WindowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
			 
		ChangeEnv_WindowClosing_Interaction1(event);
	}


	void ChangeEnv_WindowClosing_Interaction1(java.awt.event.WindowEvent event)
	{
		try {
			this.dispose();
		} catch (Exception e) {
		}
	}


	/*
	 * [Cancel]ボタンのイベントハンドラ
	 */
	void cancelButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    //終了するのみ
	    closeOpenedDialog();
	}

	/*
	 * [Default]ボタンのイベントハンドラ
	 */
	void defButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    //初期設定値をロード
	    Bine.load_init_config();
	    
	    //ダイアログへ反映
	    init_dialog();
			 
	}
	
	//キーイベントハンドラ
	class SymKey extends KeyAdapter {
	    public void keyPressed(KeyEvent evt) {
	        int code = evt.getKeyCode();
	        
	        if (code == KeyEvent.VK_ESCAPE) { // ESCキー
	            
	            closeOpenedDialog();
	            
	        }
	        
	    }
	}
	
	//ダイアログを閉じる
	void closeOpenedDialog() {
		try {
			this.dispose();
		} catch (Exception e) {
		}
	}
	
}
