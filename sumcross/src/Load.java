//'98/1/5,1/7
//
//Load.java
//【カックロ】　with JDK 1.0.2
//　《問題読み込み》
//
//※問題の作成について
//　問題を変更するには、以下の変数２つ(W?,H?)とyoko?[][],tate?[][]配列を
//　変更します。W,Hはカックロの問題の横と縦のマスの数ですが、左端
//　のヒントも数に入れます。
//　yoko[][]は横の列のヒント部で、直角が右上にきている三角形を示し
//　ます。最後は{0,0,0,0}を必ず入れておきます。
//
//※例（ステージ1）
//
//　 1   2  3 4  5  6   7  8  9       X
//1  *   *  * 4_ 6_ *   * 17_ 3_
//2  *   77 # #  #  7_ _4
//3  _13 #  # _3
//4  _9
//5  _9             ......
//6  *      _4
//7  *   4_ 830
//8  _10
//9  _7
//
//Y
//
//●二桁の数字：10の位＝左下（縦（下方向）の列の合計）
//　　　　　　　1の位＝右上（横（右方向）の行の合計）
//　_：なし　#：空
//
//たとえば､(X,Y)=(1,3)の"_13"に注目すると、横には2つの空コマがあります。
//また、加算合計は13です。これより、int yoko[][]に {3,1,2,13} を追加
//すればよいことになります。座標はＹ、Ｘの順に指定します｡
//
//Copyright (C)1997-1998 Yutaka Hirata
//All rights reserved.

import java.awt.*;

class Load{
	static final int lastStage = 2; //全ステージ数

	//ステージ１
	private int W1 = 9, H1 = 9;
	private int yoko1[][] ={
		{3,1,2,13},{4,1,2,9},{5,1,3,9},{8,1,3,10},
		{9,1,3,7},{2,2,3,7},{6,3,2,4},{7,3,4,30},
		{3,4,2,3},
		{4,4,2,4},{5,5,3,7},{8,5,4,13},{6,6,3,8},
		{9,6,3,7},{2,7,2,4},{3,7,2,3},{4,7,1,6},
		{0,0,0,0},
	};
	private int tate1[][] ={
		{2,2,3,7},{7,2,2,4},{1,3,4,23},{7,3,2,8},{1,4,1,4},
		{4,4,5,17},{1,5,3,6},{5,5,2,9},{2,6,3,7},
		{6,6,2,13},{4,7,5,16},{1,8,5,17},{7,8,2,3},
		{1,9,2,3},{5,9,1,1},{7,9,2,6},
		{0,0,0,0},
	};

	//ステージ２
	private int W2 = 9, H2 = 9;
	private int yoko2[][] ={
		{3,1,4,20},{4,1,2,16},{7,1,5,16},{8,1,3,17},
		{2,2,2,13},{9,2,2,16},{6,3,3,21},{4,4,5,21},
		{5,4,3,7},{8,5,4,19},{2,6,2,10},{3,6,3,6},
		{9,6,2,4},{7,7,2,8},
		{0,0,0,0},
	};
	private int tate2[][] ={
		{1,3,3,24},{1,4,2,7},{1,7,4,11},{1,8,3,10},
		{2,2,2,17},{2,5,5,15},{2,9,2,7},{3,6,5,34},
		{5,4,4,23},{6,2,2,6},{6,3,3,17},{6,8,3,7},
		{6,9,2,11},{7,7,2,5},
		{0,0,0,0},
	};

	//ステージ３
	private int W3 = 12, H3 = 12;
	private int yoko3[][] ={
		{4,1,2,16},{5,1,3,24},{6,1,4,30},{8,1,3,23},
		{9,1,4,11},{10,1,2,16},{3,2,4,10},{11,2,4,29},
		{2,3,3,7},{7,3,3,24},{12,3,3,16},{4,4,5,15},
		{10,4,5,33},{5,5,2,4},{8,5,2,3},{6,6,2,4},
		{9,6,2,8},{2,7,3,10},{3,7,4,26},{7,7,3,7},
		{11,7,4,28},{12,7,3,23},{5,8,4,30},{8,8,4,11},
		{6,9,3,11},{9,9,3,20},{4,10,2,16},{10,10,2,16},
		{0,0,0,0}
	};
	private int tate3[][] ={
		{1,4,2,4},{1,5,3,6},{1,6,4,10},{1,8,3,7},
		{1,9,4,29},{1,10,2,10},{2,3,4,28},{2,11,4,30},
		{3,2,3,23},{3,7,3,6},{3,12,3,17},{4,4,5,35},
		{4,10,5,17},{5,5,2,16},{5,8,2,3},{6,6,2,8},
		{6,9,2,4},{7,2,3,20},{7,3,4,26},{7,7,3,9},
		{7,11,4,26},{7,12,3,22},{8,5,4,11},{8,8,4,30},
		{9,6,3,23},{9,9,3,21},{10,4,2,15},{10,10,2,15},
		{0,0,0,0}
	};
	
	//自動解答クラス
	Solve solve;
	
	//コンストラクタ
	Load(int stage){
		switch( stage ){
		case 1:
			solve = new Solve(W1,H1,yoko1,tate1);
			break;
/*			
		case 2:
			solve = new Solve(W2,H2,yoko2,tate2);
			break;
*/			
		case 2:
			solve = new Solve(W3,H3,yoko3,tate3);
			break;
		}
	}
	
	int getW(){
		return( solve.getW() );
	}
	
	int getH(){
		return( solve.getH() );
	}

	int getPid(){
		return( solve.getPid() );
	}

	int getYmax(){
		return( solve.getYmax() );
	}

	int getEmptyCnt(){
		return( solve.getEmptyCnt() );
	}
	
	int[][] getProc(){
		return( solve.getProc() );
	}

	int[][] getBan(){
		return( solve.getBan() );
	}

}
